"""
This type stub file was generated by pyright.
"""

from keras.models import Model
from keras.utils import generic_utils
from tensorflow.python.util.tf_export import keras_export

"""Sharpness Aware Minimization implementation."""
@generic_utils.register_keras_serializable()
@keras_export("keras.models.experimental.SharpnessAwareMinimization", v1=[])
class SharpnessAwareMinimization(Model):
    """Sharpness aware minimization (SAM) training flow.

    Sharpness-aware minimization (SAM) is a technique that improves the model
    generalization and provides robustness to label noise. Mini-batch splitting
    is proven to improve the SAM's performance, so users can control how mini
    batches are split via setting the `num_batch_splits` argument.

    Args:
      model: `tf.keras.Model` instance. The inner model that does the
        forward-backward pass.
      rho: float, defaults to 0.05. The gradients scaling factor.
      num_batch_splits: int, defaults to None. The number of mini batches to
        split into from each data batch. If None, batches are not split into
        sub-batches.
      name: string, defaults to None. The name of the SAM model.

    Reference:
      [Pierre Foret et al., 2020](https://arxiv.org/abs/2010.01412)
    """
    def __init__(self, model, rho=..., num_batch_splits=..., name=...) -> None:
        ...
    
    def train_step(self, data): # -> dict[Unknown, Unknown]:
        """The logic of one SAM training step.

        Args:
          data: A nested structure of `Tensor`s. It should be of structure
            (x, y, sample_weight) or (x, y).

        Returns:
          A dict mapping metric names to running average values.
        """
        ...
    
    def call(self, inputs):
        """Forward pass of SAM.

        SAM delegates the forward pass call to the wrapped model.

        Args:
          inputs: Tensor. The model inputs.

        Returns:
          A Tensor, the outputs of the wrapped model for given `inputs`.
        """
        ...
    
    def get_config(self): # -> dict[Unknown, Unknown]:
        ...
    
    @classmethod
    def from_config(cls, config, custom_objects=...): # -> SharpnessAwareMinimization:
        ...
    


