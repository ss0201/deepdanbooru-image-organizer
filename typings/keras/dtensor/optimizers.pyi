"""
This type stub file was generated by pyright.
"""

from keras.optimizers.optimizer_experimental import adadelta, adagrad, adam, adamw, optimizer as optimizer_lib, rmsprop, sgd
from tensorflow.python.util.tf_export import keras_export
from tensorflow.tools.docs import doc_controls

"""DTensor specific Keras optimizers."""
class Optimizer(optimizer_lib._BaseOptimizer):
    """DTensor specific optimizers.

    The major changes for this class is that all the variable init logic will be
    mesh/layout aware.

    """
    def __init__(self, name, mesh=...) -> None:
        """Create a new Optimizer.

        Args:
          name: String. The name of the optimizer, which will appear in all the
            state variables created by this optimizer.
          mesh: dtensor.Mesh. The optional Mesh which will be used to create
            the states. Note that usually the state variable will use the layout
            from the corresponding model variables. This mesh only used for
            global variables like globle steps, learning rate, etc.
        """
        ...
    
    def add_variable_from_reference(self, model_variable, variable_name, initial_value=...):
        """Create an optimizer variable from model variable.

        Create an optimizer variable based on the information of model variable.
        For example, in SGD optimizer momemtum, for each model variable, a
        corresponding momemtum variable is created of the same shape and dtype.

        Args:
          model_variable: The corresponding model variable to the optimizer
            variable to be created.
          variable_name: The name prefix of the optimizer variable to be
            created.  The create variables name will follow the pattern
            `{variable_name}/{model_variable.name}`, e.g., `momemtum/dense_1`.
          initial_value: The initial value of the optimizer variable, if None,
            the value will be default to 0.

        Returns:
          An optimizer variable.
        """
        ...
    
    @doc_controls.do_not_generate_docs
    def aggregate_gradients(self, grads_and_vars):
        ...
    
    def apply_gradients(self, grads_and_vars): # -> None:
        """Apply gradients to variables.

        Args:
          grads_and_vars: List of (gradient, variable) pairs.

        Returns:
          None

        Raises:
          TypeError: If `grads_and_vars` is malformed.
        """
        ...
    


@keras_export("keras.dtensor.experimental.optimizers.Adadelta", v1=[])
class Adadelta(Optimizer, adadelta.Adadelta):
    def __init__(self, learning_rate=..., rho=..., epsilon=..., gradients_clip_option=..., ema_option=..., name=..., mesh=...) -> None:
        ...
    


@keras_export("keras.dtensor.experimental.optimizers.Adagrad", v1=[])
class Adagrad(Optimizer, adagrad.Adagrad):
    def __init__(self, learning_rate=..., initial_accumulator_value=..., epsilon=..., gradients_clip_option=..., ema_option=..., name=..., mesh=...) -> None:
        ...
    


@keras_export("keras.dtensor.experimental.optimizers.Adam", v1=[])
class Adam(Optimizer, adam.Adam):
    def __init__(self, learning_rate=..., beta_1=..., beta_2=..., epsilon=..., amsgrad=..., gradients_clip_option=..., ema_option=..., name=..., mesh=...) -> None:
        ...
    


@keras_export("keras.dtensor.experimental.optimizers.AdamW", v1=[])
class AdamW(Optimizer, adamw.AdamW):
    def __init__(self, learning_rate=..., weight_decay=..., beta_1=..., beta_2=..., epsilon=..., amsgrad=..., name=..., mesh=...) -> None:
        ...
    


@keras_export("keras.dtensor.experimental.optimizers.RMSprop", v1=[])
class RMSprop(Optimizer, rmsprop.RMSprop):
    def __init__(self, learning_rate=..., rho=..., momentum=..., epsilon=..., centered=..., gradients_clip_option=..., ema_option=..., jit_compile=..., name=..., mesh=...) -> None:
        ...
    


@keras_export("keras.dtensor.experimental.optimizers.SGD", v1=[])
class SGD(Optimizer, sgd.SGD):
    def __init__(self, learning_rate=..., momentum=..., nesterov=..., amsgrad=..., gradients_clip_option=..., ema_option=..., jit_compile=..., name=..., mesh=...) -> None:
        ...
    


