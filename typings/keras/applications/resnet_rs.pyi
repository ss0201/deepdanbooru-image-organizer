"""
This type stub file was generated by pyright.
"""

from typing import Callable, Dict, List, Union
from tensorflow.python.util.tf_export import keras_export

"""ResNet-RS models for Keras.

Reference:
- [Revisiting ResNets: Improved Training and Scaling Strategies](
    https://arxiv.org/pdf/2103.07579.pdf)
"""
BASE_WEIGHTS_URL = ...
WEIGHT_HASHES = ...
DEPTH_TO_WEIGHT_VARIANTS = ...
BLOCK_ARGS = ...
CONV_KERNEL_INITIALIZER = ...
BASE_DOCSTRING = ...
def Conv2DFixedPadding(filters, kernel_size, strides, name=...): # -> (inputs: Unknown) -> (Unknown | None):
    """Conv2D block with fixed padding."""
    ...

def STEM(bn_momentum: float = ..., bn_epsilon: float = ..., activation: str = ..., name=...): # -> (inputs: Unknown) -> (Unknown | None):
    """ResNet-D type STEM block."""
    ...

def SE(in_filters: int, se_ratio: float = ..., expand_ratio: int = ..., name=...): # -> (inputs: Unknown) -> (Unknown | None):
    """Squeeze and Excitation block."""
    ...

def BottleneckBlock(filters: int, strides: int, use_projection: bool, bn_momentum: float = ..., bn_epsilon: float = ..., activation: str = ..., se_ratio: float = ..., survival_probability: float = ..., name=...): # -> (inputs: Unknown) -> (Unknown | None):
    """Bottleneck block variant for residual networks with BN."""
    ...

def BlockGroup(filters, strides, num_repeats, se_ratio: float = ..., bn_epsilon: float = ..., bn_momentum: float = ..., activation: str = ..., survival_probability: float = ..., name=...): # -> (inputs: Unknown) -> (Unknown | None):
    """Create one group of blocks for the ResNet model."""
    ...

def get_survival_probability(init_rate, block_num, total_blocks):
    """Get survival probability based on block number and initial rate."""
    ...

def allow_bigger_recursion(target_limit: int): # -> None:
    """Increase default recursion limit to create larger models."""
    ...

def fixed_padding(inputs, kernel_size): # -> None:
    """Pad the input along the spatial dimensions independently of input
    size."""
    ...

def ResNetRS(depth: int, input_shape=..., bn_momentum=..., bn_epsilon=..., activation: str = ..., se_ratio=..., dropout_rate=..., drop_connect_rate=..., include_top=..., block_args: List[Dict[str, int]] = ..., model_name=..., pooling=..., weights=..., input_tensor=..., classes=..., classifier_activation: Union[str, Callable] = ..., include_preprocessing=...): # -> Model:
    """Build Resnet-RS model, given provided parameters.

    Args:
        depth: Depth of ResNet network.
        input_shape: optional shape tuple. It should have exactly 3 inputs
          channels, and width and height should be no smaller than 32. E.g.
          (200, 200, 3) would be one valid value.
        bn_momentum: Momentum parameter for Batch Normalization layers.
        bn_epsilon: Epsilon parameter for Batch Normalization layers.
        activation: activation function.
        se_ratio: Squeeze and Excitation layer ratio.
        dropout_rate: dropout rate before final classifier layer.
        drop_connect_rate: dropout rate at skip connections.
        include_top: whether to include the fully-connected layer at the top of
          the network.
        block_args: list of dicts, parameters to construct block modules.
        model_name: name of the model.
        pooling: optional pooling mode for feature extraction when `include_top`
          is `False`.
          - `None` means that the output of the model will be the 4D tensor
            output of the last convolutional layer.
          - `avg` means that global average pooling will be applied to the
            output of the last convolutional layer, and thus the output of the
            model will be a 2D tensor.
          - `max` means that global max pooling will be applied.
        weights: one of `None` (random initialization), `'imagenet'`
          (pre-training on ImageNet), or the path to the weights file to be
          loaded. Note- one model can have multiple imagenet variants depending
          on input shape it was trained with. For input_shape 224x224 pass
          `imagenet-i224` as argument. By default, highest input shape weights
          are downloaded.
        input_tensor: optional Keras tensor (i.e. output of `layers.Input()`) to
          use as image input for the model.
        classes: optional number of classes to classify images into, only to be
          specified if `include_top` is True, and if no `weights` argument is
          specified.
        classifier_activation: A `str` or callable. The activation function to
          use on the "top" layer. Ignored unless `include_top=True`. Set
          `classifier_activation=None` to return the logits of the "top" layer.
        include_preprocessing: Boolean, whether to include the preprocessing
          layer (`Rescaling`) at the bottom of the network. Defaults to `True`.
          Note- Input image is normalized by ImageNet mean and standard
          deviation.

    Returns:
        A `tf.keras.Model` instance.

    Raises:
        ValueError: in case of invalid argument for `weights`, or invalid input
            shape.
        ValueError: if `classifier_activation` is not `softmax` or `None` when
            using a pretrained top layer.
    """
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS50", "keras.applications.ResNetRS50")
def ResNetRS50(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS50 model."""
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS101", "keras.applications.ResNetRS101")
def ResNetRS101(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS101 model."""
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS152", "keras.applications.ResNetRS152")
def ResNetRS152(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS152 model."""
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS200", "keras.applications.ResNetRS200")
def ResNetRS200(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS200 model."""
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS270", "keras.applications.ResNetRS270")
def ResNetRS270(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS-270 model."""
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS350", "keras.applications.ResNetRS350")
def ResNetRS350(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS350 model."""
    ...

@keras_export("keras.applications.resnet_rs.ResNetRS420", "keras.applications.ResNetRS420")
def ResNetRS420(include_top=..., weights=..., classes=..., input_shape=..., input_tensor=..., pooling=..., classifier_activation=..., include_preprocessing=...): # -> Model:
    """Build ResNet-RS420 model."""
    ...

@keras_export("keras.applications.resnet_rs.preprocess_input")
def preprocess_input(x, data_format=...):
    """A placeholder method for backward compatibility.

    The preprocessing logic has been included in the ResnetRS model
    implementation. Users are no longer required to call this method to
    normalize
    the input data. This method does nothing and only kept as a placeholder to
    align the API surface between old and new version of model.

    Args:
      x: A floating point `numpy.array` or a `tf.Tensor`.
      data_format: Optional data format of the image tensor/array. Defaults to
        None, in which case the global setting
        `tf.keras.backend.image_data_format()` is used (unless you changed it,
        it defaults to "channels_last").{mode}

    Returns:
      Unchanged `numpy.array` or `tf.Tensor`.
    """
    ...

@keras_export("keras.applications.resnet_rs.decode_predictions")
def decode_predictions(preds, top=...): # -> list[Unknown]:
    ...

