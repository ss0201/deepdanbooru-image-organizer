"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.tf_export import keras_export

"""ResNet models for Keras.

Reference:
  - [Deep Residual Learning for Image Recognition](
      https://arxiv.org/abs/1512.03385) (CVPR 2015)
"""
BASE_WEIGHTS_PATH = ...
WEIGHTS_HASHES = ...
layers = ...
def ResNet(stack_fn, preact, use_bias, model_name=..., include_top=..., weights=..., input_tensor=..., input_shape=..., pooling=..., classes=..., classifier_activation=..., **kwargs): # -> Model:
    """Instantiates the ResNet, ResNetV2, and ResNeXt architecture.

    Args:
      stack_fn: a function that returns output tensor for the
        stacked residual blocks.
      preact: whether to use pre-activation or not
        (True for ResNetV2, False for ResNet and ResNeXt).
      use_bias: whether to use biases for convolutional layers or not
        (True for ResNet and ResNetV2, False for ResNeXt).
      model_name: string, model name.
      include_top: whether to include the fully-connected
        layer at the top of the network.
      weights: one of `None` (random initialization),
        'imagenet' (pre-training on ImageNet),
        or the path to the weights file to be loaded.
      input_tensor: optional Keras tensor
        (i.e. output of `layers.Input()`)
        to use as image input for the model.
      input_shape: optional shape tuple, only to be specified
        if `include_top` is False (otherwise the input shape
        has to be `(224, 224, 3)` (with `channels_last` data format)
        or `(3, 224, 224)` (with `channels_first` data format).
        It should have exactly 3 inputs channels.
      pooling: optional pooling mode for feature extraction
        when `include_top` is `False`.
        - `None` means that the output of the model will be
            the 4D tensor output of the
            last convolutional layer.
        - `avg` means that global average pooling
            will be applied to the output of the
            last convolutional layer, and thus
            the output of the model will be a 2D tensor.
        - `max` means that global max pooling will
            be applied.
      classes: optional number of classes to classify images
        into, only to be specified if `include_top` is True, and
        if no `weights` argument is specified.
      classifier_activation: A `str` or callable. The activation function to use
        on the "top" layer. Ignored unless `include_top=True`. Set
        `classifier_activation=None` to return the logits of the "top" layer.
        When loading pretrained weights, `classifier_activation` can only
        be `None` or `"softmax"`.
      **kwargs: For backwards compatibility only.

    Returns:
      A `keras.Model` instance.
    """
    ...

def block1(x, filters, kernel_size=..., stride=..., conv_shortcut=..., name=...):
    """A residual block.

    Args:
      x: input tensor.
      filters: integer, filters of the bottleneck layer.
      kernel_size: default 3, kernel size of the bottleneck layer.
      stride: default 1, stride of the first layer.
      conv_shortcut: default True, use convolution shortcut if True,
          otherwise identity shortcut.
      name: string, block label.

    Returns:
      Output tensor for the residual block.
    """
    ...

def stack1(x, filters, blocks, stride1=..., name=...):
    """A set of stacked residual blocks.

    Args:
      x: input tensor.
      filters: integer, filters of the bottleneck layer in a block.
      blocks: integer, blocks in the stacked blocks.
      stride1: default 2, stride of the first layer in the first block.
      name: string, stack label.

    Returns:
      Output tensor for the stacked blocks.
    """
    ...

def block2(x, filters, kernel_size=..., stride=..., conv_shortcut=..., name=...):
    """A residual block.

    Args:
        x: input tensor.
        filters: integer, filters of the bottleneck layer.
        kernel_size: default 3, kernel size of the bottleneck layer.
        stride: default 1, stride of the first layer.
        conv_shortcut: default False, use convolution shortcut if True,
          otherwise identity shortcut.
        name: string, block label.

    Returns:
      Output tensor for the residual block.
    """
    ...

def stack2(x, filters, blocks, stride1=..., name=...):
    """A set of stacked residual blocks.

    Args:
        x: input tensor.
        filters: integer, filters of the bottleneck layer in a block.
        blocks: integer, blocks in the stacked blocks.
        stride1: default 2, stride of the first layer in the first block.
        name: string, stack label.

    Returns:
        Output tensor for the stacked blocks.
    """
    ...

def block3(x, filters, kernel_size=..., stride=..., groups=..., conv_shortcut=..., name=...):
    """A residual block.

    Args:
      x: input tensor.
      filters: integer, filters of the bottleneck layer.
      kernel_size: default 3, kernel size of the bottleneck layer.
      stride: default 1, stride of the first layer.
      groups: default 32, group size for grouped convolution.
      conv_shortcut: default True, use convolution shortcut if True,
          otherwise identity shortcut.
      name: string, block label.

    Returns:
      Output tensor for the residual block.
    """
    ...

def stack3(x, filters, blocks, stride1=..., groups=..., name=...):
    """A set of stacked residual blocks.

    Args:
      x: input tensor.
      filters: integer, filters of the bottleneck layer in a block.
      blocks: integer, blocks in the stacked blocks.
      stride1: default 2, stride of the first layer in the first block.
      groups: default 32, group size for grouped convolution.
      name: string, stack label.

    Returns:
      Output tensor for the stacked blocks.
    """
    ...

@keras_export("keras.applications.resnet50.ResNet50", "keras.applications.resnet.ResNet50", "keras.applications.ResNet50")
def ResNet50(include_top=..., weights=..., input_tensor=..., input_shape=..., pooling=..., classes=..., **kwargs): # -> Model:
    """Instantiates the ResNet50 architecture."""
    ...

@keras_export("keras.applications.resnet.ResNet101", "keras.applications.ResNet101")
def ResNet101(include_top=..., weights=..., input_tensor=..., input_shape=..., pooling=..., classes=..., **kwargs): # -> Model:
    """Instantiates the ResNet101 architecture."""
    ...

@keras_export("keras.applications.resnet.ResNet152", "keras.applications.ResNet152")
def ResNet152(include_top=..., weights=..., input_tensor=..., input_shape=..., pooling=..., classes=..., **kwargs): # -> Model:
    """Instantiates the ResNet152 architecture."""
    ...

@keras_export("keras.applications.resnet50.preprocess_input", "keras.applications.resnet.preprocess_input")
def preprocess_input(x, data_format=...):
    ...

@keras_export("keras.applications.resnet50.decode_predictions", "keras.applications.resnet.decode_predictions")
def decode_predictions(preds, top=...): # -> list[Unknown]:
    ...

DOC = ...
