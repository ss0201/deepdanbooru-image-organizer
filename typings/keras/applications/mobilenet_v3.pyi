"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.tf_export import keras_export

"""MobileNet v3 models for Keras."""
BASE_WEIGHT_PATH = ...
WEIGHTS_HASHES = ...
layers = ...
BASE_DOCSTRING = ...
def MobileNetV3(stack_fn, last_point_ch, input_shape=..., alpha=..., model_type=..., minimalistic=..., include_top=..., weights=..., input_tensor=..., classes=..., pooling=..., dropout_rate=..., classifier_activation=..., include_preprocessing=...):
    ...

@keras_export("keras.applications.MobileNetV3Small")
def MobileNetV3Small(input_shape=..., alpha=..., minimalistic=..., include_top=..., weights=..., input_tensor=..., classes=..., pooling=..., dropout_rate=..., classifier_activation=..., include_preprocessing=...):
    ...

@keras_export("keras.applications.MobileNetV3Large")
def MobileNetV3Large(input_shape=..., alpha=..., minimalistic=..., include_top=..., weights=..., input_tensor=..., classes=..., pooling=..., dropout_rate=..., classifier_activation=..., include_preprocessing=...):
    ...

def relu(x): # -> Any:
    ...

def hard_sigmoid(x): # -> Any:
    ...

def hard_swish(x): # -> Any:
    ...

@keras_export("keras.applications.mobilenet_v3.preprocess_input")
def preprocess_input(x, data_format=...):
    """A placeholder method for backward compatibility.

    The preprocessing logic has been included in the mobilenet_v3 model
    implementation. Users are no longer required to call this method to
    normalize the input data. This method does nothing and only kept as a
    placeholder to align the API surface between old and new version of model.

    Args:
      x: A floating point `numpy.array` or a `tf.Tensor`.
      data_format: Optional data format of the image tensor/array. Defaults to
        None, in which case the global setting
        `tf.keras.backend.image_data_format()` is used (unless you changed it,
        it defaults to "channels_last").{mode}

    Returns:
      Unchanged `numpy.array` or `tf.Tensor`.
    """
    ...

@keras_export("keras.applications.mobilenet_v3.decode_predictions")
def decode_predictions(preds, top=...): # -> list[Unknown]:
    ...

