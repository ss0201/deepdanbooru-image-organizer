"""
This type stub file was generated by pyright.
"""

from keras.engine import base_layer
from keras.utils import tf_utils
from tensorflow.python.util.tf_export import keras_export

"""Wrapper allowing a stack of RNN cells to behave as a single cell."""
@keras_export("keras.layers.StackedRNNCells")
class StackedRNNCells(base_layer.Layer):
    """Wrapper allowing a stack of RNN cells to behave as a single cell.

    Used to implement efficient stacked RNNs.

    Args:
      cells: List of RNN cell instances.

    Examples:

    ```python
    batch_size = 3
    sentence_max_length = 5
    n_features = 2
    new_shape = (batch_size, sentence_max_length, n_features)
    x = tf.constant(np.reshape(np.arange(30), new_shape), dtype = tf.float32)

    rnn_cells = [tf.keras.layers.LSTMCell(128) for _ in range(2)]
    stacked_lstm = tf.keras.layers.StackedRNNCells(rnn_cells)
    lstm_layer = tf.keras.layers.RNN(stacked_lstm)

    result = lstm_layer(x)
    ```
    """
    def __init__(self, cells, **kwargs) -> None:
        ...
    
    @property
    def state_size(self): # -> tuple[Unknown, ...]:
        ...
    
    @property
    def output_size(self):
        ...
    
    def get_initial_state(self, inputs=..., batch_size=..., dtype=...): # -> tuple[Unknown, ...]:
        ...
    
    def call(self, inputs, states, constants=..., training=..., **kwargs): # -> tuple[Unknown, Unknown]:
        ...
    
    @tf_utils.shape_type_conversion
    def build(self, input_shape): # -> None:
        ...
    
    def get_config(self): # -> dict[str, Unknown]:
        ...
    
    @classmethod
    def from_config(cls, config, custom_objects=...): # -> Self@StackedRNNCells:
        ...
    


