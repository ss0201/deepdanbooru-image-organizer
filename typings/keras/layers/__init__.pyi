"""
This type stub file was generated by pyright.
"""

import tensorflow.compat.v2 as tf
from keras.engine.base_layer import Layer
from keras.engine.base_preprocessing_layer import PreprocessingLayer
from keras.engine.input_layer import Input, InputLayer
from keras.engine.input_spec import InputSpec
from keras.layers.activation.elu import ELU
from keras.layers.activation.leaky_relu import LeakyReLU
from keras.layers.activation.prelu import PReLU
from keras.layers.activation.relu import ReLU
from keras.layers.activation.softmax import Softmax
from keras.layers.activation.thresholded_relu import ThresholdedReLU
from keras.layers.attention.additive_attention import AdditiveAttention
from keras.layers.attention.attention import Attention
from keras.layers.attention.multi_head_attention import MultiHeadAttention
from keras.layers.convolutional.conv1d import Conv1D, Convolution1D
from keras.layers.convolutional.conv1d_transpose import Conv1DTranspose, Convolution1DTranspose
from keras.layers.convolutional.conv2d import Conv2D, Convolution2D
from keras.layers.convolutional.conv2d_transpose import Conv2DTranspose, Convolution2DTranspose
from keras.layers.convolutional.conv3d import Conv3D, Convolution3D
from keras.layers.convolutional.conv3d_transpose import Conv3DTranspose, Convolution3DTranspose
from keras.layers.convolutional.depthwise_conv1d import DepthwiseConv1D
from keras.layers.convolutional.depthwise_conv2d import DepthwiseConv2D
from keras.layers.convolutional.separable_conv1d import SeparableConv1D, SeparableConvolution1D
from keras.layers.convolutional.separable_conv2d import SeparableConv2D, SeparableConvolution2D
from keras.layers.core.activation import Activation
from keras.layers.core.dense import Dense
from keras.layers.core.einsum_dense import EinsumDense
from keras.layers.core.embedding import Embedding
from keras.layers.core.lambda_layer import Lambda
from keras.layers.core.masking import Masking
from keras.layers.core.tf_op_layer import ClassMethod, InstanceMethod, InstanceProperty, SlicingOpLambda, TFOpLambda
from keras.layers.locally_connected.locally_connected1d import LocallyConnected1D
from keras.layers.locally_connected.locally_connected2d import LocallyConnected2D
from keras.layers.merging.add import Add, add
from keras.layers.merging.average import Average, average
from keras.layers.merging.concatenate import Concatenate, concatenate
from keras.layers.merging.dot import Dot, dot
from keras.layers.merging.maximum import Maximum, maximum
from keras.layers.merging.minimum import Minimum, minimum
from keras.layers.merging.multiply import Multiply, multiply
from keras.layers.merging.subtract import Subtract, subtract
from keras.layers.normalization.batch_normalization import BatchNormalization, SyncBatchNormalization
from keras.layers.normalization.layer_normalization import LayerNormalization
from keras.layers.normalization.unit_normalization import UnitNormalization
from keras.layers.preprocessing.category_encoding import CategoryEncoding
from keras.layers.preprocessing.discretization import Discretization
from keras.layers.preprocessing.hashed_crossing import HashedCrossing
from keras.layers.preprocessing.hashing import Hashing
from keras.layers.preprocessing.image_preprocessing import CenterCrop, RandomBrightness, RandomContrast, RandomCrop, RandomFlip, RandomHeight, RandomRotation, RandomTranslation, RandomWidth, RandomZoom, Rescaling, Resizing
from keras.layers.preprocessing.integer_lookup import IntegerLookup
from keras.layers.preprocessing.normalization import Normalization
from keras.layers.preprocessing.string_lookup import StringLookup
from keras.layers.preprocessing.text_vectorization import TextVectorization
from keras.layers.regularization.activity_regularization import ActivityRegularization
from keras.layers.regularization.alpha_dropout import AlphaDropout
from keras.layers.regularization.dropout import Dropout
from keras.layers.regularization.gaussian_dropout import GaussianDropout
from keras.layers.regularization.gaussian_noise import GaussianNoise
from keras.layers.regularization.spatial_dropout1d import SpatialDropout1D
from keras.layers.regularization.spatial_dropout2d import SpatialDropout2D
from keras.layers.regularization.spatial_dropout3d import SpatialDropout3D
from keras.layers.reshaping.cropping1d import Cropping1D
from keras.layers.reshaping.cropping2d import Cropping2D
from keras.layers.reshaping.cropping3d import Cropping3D
from keras.layers.reshaping.flatten import Flatten
from keras.layers.reshaping.permute import Permute
from keras.layers.reshaping.repeat_vector import RepeatVector
from keras.layers.reshaping.reshape import Reshape
from keras.layers.reshaping.up_sampling1d import UpSampling1D
from keras.layers.reshaping.up_sampling2d import UpSampling2D
from keras.layers.reshaping.up_sampling3d import UpSampling3D
from keras.layers.reshaping.zero_padding1d import ZeroPadding1D
from keras.layers.reshaping.zero_padding2d import ZeroPadding2D
from keras.layers.reshaping.zero_padding3d import ZeroPadding3D
from tensorflow.python import tf2
from keras.layers.normalization.batch_normalization_v1 import BatchNormalization as BatchNormalizationV1
from keras.layers.kernelized import RandomFourierFeatures
from keras.layers.pooling.average_pooling1d import AveragePooling1D, AvgPool1D
from keras.layers.pooling.average_pooling2d import AveragePooling2D, AvgPool2D
from keras.layers.pooling.average_pooling3d import AveragePooling3D, AvgPool3D
from keras.layers.pooling.global_average_pooling1d import GlobalAveragePooling1D, GlobalAvgPool1D
from keras.layers.pooling.global_average_pooling2d import GlobalAveragePooling2D, GlobalAvgPool2D
from keras.layers.pooling.global_average_pooling3d import GlobalAveragePooling3D, GlobalAvgPool3D
from keras.layers.pooling.global_max_pooling1d import GlobalMaxPool1D, GlobalMaxPooling1D
from keras.layers.pooling.global_max_pooling2d import GlobalMaxPool2D, GlobalMaxPooling2D
from keras.layers.pooling.global_max_pooling3d import GlobalMaxPool3D, GlobalMaxPooling3D
from keras.layers.pooling.max_pooling1d import MaxPool1D, MaxPooling1D
from keras.layers.pooling.max_pooling2d import MaxPool2D, MaxPooling2D
from keras.layers.pooling.max_pooling3d import MaxPool3D, MaxPooling3D
from keras.layers.rnn.abstract_rnn_cell import AbstractRNNCell
from keras.layers.rnn.base_rnn import RNN
from keras.layers.rnn.simple_rnn import SimpleRNN, SimpleRNNCell
from keras.layers.rnn.stacked_rnn_cells import StackedRNNCells
from keras.layers.rnn.gru import GRU, GRUCell
from keras.layers.rnn.gru_v1 import GRU as GRUV1, GRUCell as GRUCellV1
from keras.layers.rnn.lstm import LSTM, LSTMCell
from keras.layers.rnn.lstm_v1 import LSTM as LSTMV1, LSTMCell as LSTMCellV1
from keras.layers import serialization
from keras.layers.rnn.base_wrapper import Wrapper
from keras.layers.rnn.bidirectional import Bidirectional
from keras.layers.rnn.cell_wrappers import DeviceWrapper, DropoutWrapper, ResidualWrapper
from keras.layers.rnn.conv_lstm1d import ConvLSTM1D
from keras.layers.rnn.conv_lstm2d import ConvLSTM2D
from keras.layers.rnn.conv_lstm3d import ConvLSTM3D
from keras.layers.rnn.cudnn_gru import CuDNNGRU
from keras.layers.rnn.cudnn_lstm import CuDNNLSTM
from keras.layers.rnn.time_distributed import TimeDistributed
from keras.layers.serialization import deserialize, deserialize_from_json, get_builtin_layer, serialize

"""Keras layers API."""
if tf.__internal__.tf2.enabled():
    BatchNormalizationV2 = ...
else:
    BatchNormalizationV1 = ...
if tf.__internal__.tf2.enabled():
    GRUV2 = ...
    GRUCellV2 = ...
    LSTMV2 = ...
    LSTMCellV2 = ...
else:
    GRUV1 = ...
    GRUCellV1 = ...
    LSTMV1 = ...
    LSTMCellV1 = ...
class VersionAwareLayers:
    """Utility to be used internally to access layers in a V1/V2-aware fashion.

    When using layers within the Keras codebase, under the constraint that
    e.g. `layers.BatchNormalization` should be the `BatchNormalization` version
    corresponding to the current runtime (TF1 or TF2), do not simply access
    `layers.BatchNormalization` since it would ignore e.g. an early
    `compat.v2.disable_v2_behavior()` call. Instead, use an instance
    of `VersionAwareLayers` (which you can use just like the `layers` module).
    """
    def __getattr__(self, name): # -> Any:
        ...
    


