"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.tf_export import keras_export

"""Layer serialization/deserialization functions."""
ALL_MODULES = ...
ALL_V2_MODULES = ...
LOCAL = ...
def populate_deserializable_objects(): # -> None:
    """Populates dict ALL_OBJECTS with every built-in layer."""
    ...

@keras_export("keras.layers.serialize")
def serialize(layer): # -> Any | dict[str, Unknown] | None:
    """Serializes a `Layer` object into a JSON-compatible representation.

    Args:
      layer: The `Layer` object to serialize.

    Returns:
      A JSON-serializable dict representing the object's config.

    Example:

    ```python
    from pprint import pprint
    model = tf.keras.models.Sequential()
    model.add(tf.keras.Input(shape=(16,)))
    model.add(tf.keras.layers.Dense(32, activation='relu'))

    pprint(tf.keras.layers.serialize(model))
    # prints the configuration of the model, as a dict.
    """
    ...

@keras_export("keras.layers.deserialize")
def deserialize(config, custom_objects=...): # -> Any | None:
    """Instantiates a layer from a config dictionary.

    Args:
        config: dict of the form {'class_name': str, 'config': dict}
        custom_objects: dict mapping class names (or function names) of custom
          (non-Keras) objects to class/functions

    Returns:
        Layer instance (may be Model, Sequential, Network, Layer...)

    Example:

    ```python
    # Configuration of Dense(32, activation='relu')
    config = {
      'class_name': 'Dense',
      'config': {
        'activation': 'relu',
        'activity_regularizer': None,
        'bias_constraint': None,
        'bias_initializer': {'class_name': 'Zeros', 'config': {}},
        'bias_regularizer': None,
        'dtype': 'float32',
        'kernel_constraint': None,
        'kernel_initializer': {'class_name': 'GlorotUniform',
                               'config': {'seed': None}},
        'kernel_regularizer': None,
        'name': 'dense',
        'trainable': True,
        'units': 32,
        'use_bias': True
      }
    }
    dense_layer = tf.keras.layers.deserialize(config)
    ```
    """
    ...

def get_builtin_layer(class_name): # -> Any:
    """Returns class if `class_name` is registered, else returns None."""
    ...

def deserialize_from_json(json_string, custom_objects=...): # -> Any | None:
    """Instantiates a layer from a JSON string."""
    ...

