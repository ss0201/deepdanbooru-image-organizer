"""
This type stub file was generated by pyright.
"""

from keras.engine import training
from tensorflow.python.util import deprecation
from tensorflow.python.util.tf_export import keras_export

"""Built-in linear model classes."""
@keras_export("keras.experimental.LinearModel", v1=["keras.experimental.LinearModel", "keras.models.LinearModel"])
@deprecation.deprecated_endpoints("keras.experimental.LinearModel")
class LinearModel(training.Model):
    r"""Linear Model for regression and classification problems.

    This model approximates the following function:
    $$y = \beta + \sum_{i=1}^{N} w_{i} * x_{i}$$
    where $$\beta$$ is the bias and $$w_{i}$$ is the weight for each feature.

    Example:

    ```python
    model = LinearModel()
    model.compile(optimizer='sgd', loss='mse')
    model.fit(x, y, epochs=epochs)
    ```

    This model accepts sparse float inputs as well:

    Example:
    ```python
    model = LinearModel()
    opt = tf.keras.optimizers.Adam()
    loss_fn = tf.keras.losses.MeanSquaredError()
    with tf.GradientTape() as tape:
      output = model(sparse_input)
      loss = tf.reduce_mean(loss_fn(target, output))
    grads = tape.gradient(loss, model.weights)
    opt.apply_gradients(zip(grads, model.weights))
    ```

    """
    def __init__(self, units=..., activation=..., use_bias=..., kernel_initializer=..., bias_initializer=..., kernel_regularizer=..., bias_regularizer=..., **kwargs) -> None:
        """Create a Linear Model.

        Args:
          units: Positive integer, output dimension without the batch size.
          activation: Activation function to use.
            If you don't specify anything, no activation is applied.
          use_bias: whether to calculate the bias/intercept for this model. If
            set to False, no bias/intercept will be used in calculations, e.g.,
            the data is already centered.
          kernel_initializer: Initializer for the `kernel` weights matrices.
          bias_initializer: Initializer for the bias vector.
          kernel_regularizer: regularizer for kernel vectors.
          bias_regularizer: regularizer for bias vector.
          **kwargs: The keyword arguments that are passed on to
            BaseLayer.__init__.
        """
        ...
    
    def build(self, input_shape): # -> None:
        ...
    
    def call(self, inputs): # -> Any | None:
        ...
    
    def get_config(self): # -> dict[str, Unknown]:
        ...
    
    @classmethod
    def from_config(cls, config, custom_objects=...): # -> Self@LinearModel:
        ...
    


