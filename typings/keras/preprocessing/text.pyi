"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.tf_export import keras_export

"""Utilities for text input preprocessing.

Deprecated: `tf.keras.preprocessing.text` APIs are not recommended for new code.
Prefer `tf.keras.utils.text_dataset_from_directory` and
`tf.keras.layers.TextVectorization` which provide a more efficient approach
for preprocessing text input. For an introduction to these APIs, see
the [text loading tutorial]
(https://www.tensorflow.org/tutorials/load_data/text)
and [preprocessing layer guide]
(https://www.tensorflow.org/guide/keras/preprocessing_layers).
"""
@keras_export("keras.preprocessing.text.text_to_word_sequence")
def text_to_word_sequence(input_text, filters=..., lower=..., split=...): # -> list[Unknown]:
    r"""Converts a text to a sequence of words (or tokens).

    Deprecated: `tf.keras.preprocessing.text.text_to_word_sequence` does not
    operate on tensors and is not recommended for new code. Prefer
    `tf.strings.regex_replace` and `tf.strings.split` which provide equivalent
    functionality and accept `tf.Tensor` input. For an overview of text handling
    in Tensorflow, see the [text loading tutorial]
    (https://www.tensorflow.org/tutorials/load_data/text).

    This function transforms a string of text into a list of words
    while ignoring `filters` which include punctuations by default.

    >>> sample_text = 'This is a sample sentence.'
    >>> tf.keras.preprocessing.text.text_to_word_sequence(sample_text)
    ['this', 'is', 'a', 'sample', 'sentence']

    Args:
        input_text: Input text (string).
        filters: list (or concatenation) of characters to filter out, such as
            punctuation. Default: ``'!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\\t\\n'``,
              includes basic punctuation, tabs, and newlines.
        lower: boolean. Whether to convert the input to lowercase.
        split: str. Separator for word splitting.

    Returns:
        A list of words (or tokens).
    """
    ...

@keras_export("keras.preprocessing.text.one_hot")
def one_hot(input_text, n, filters=..., lower=..., split=..., analyzer=...): # -> list[Unknown]:
    r"""One-hot encodes a text into a list of word indexes of size `n`.

    Deprecated: `tf.keras.text.preprocessing.one_hot` does not operate on
    tensors and is not recommended for new code. Prefer
    `tf.keras.layers.Hashing` with `output_mode='one_hot'` which provides
    equivalent functionality through a layer which accepts `tf.Tensor` input.
    See the [preprocessing layer guide]
    (https://www.tensorflow.org/guide/keras/preprocessing_layers) for an
    overview of preprocessing layers.

    This function receives as input a string of text and returns a
    list of encoded integers each corresponding to a word (or token)
    in the given input string.

    Args:
        input_text: Input text (string).
        n: int. Size of vocabulary.
        filters: list (or concatenation) of characters to filter out, such as
          punctuation. Default:
          ```
          '!"#$%&()*+,-./:;<=>?@[\]^_`{|}~\t\n
          ```,
          includes basic punctuation, tabs, and newlines.
        lower: boolean. Whether to set the text to lowercase.
        split: str. Separator for word splitting.
        analyzer: function. Custom analyzer to split the text

    Returns:
        List of integers in `[1, n]`. Each integer encodes a word
        (unicity non-guaranteed).
    """
    ...

@keras_export("keras.preprocessing.text.hashing_trick")
def hashing_trick(text, n, hash_function=..., filters=..., lower=..., split=..., analyzer=...): # -> list[Unknown]:
    r"""Converts a text to a sequence of indexes in a fixed-size hashing space.

    Deprecated: `tf.keras.text.preprocessing.hashing_trick` does not operate on
    tensors and is not recommended for new code. Prefer
    `tf.keras.layers.Hashing` which provides equivalent functionality through a
    layer which accepts `tf.Tensor` input. See the [preprocessing layer guide](
    https://www.tensorflow.org/guide/keras/preprocessing_layers) for an
    overview of preprocessing layers.

    Args:
        text: Input text (string).
        n: Dimension of the hashing space.
        hash_function: defaults to python `hash` function, can be 'md5' or
            any function that takes in input a string and returns a int.
            Note that 'hash' is not a stable hashing function, so
            it is not consistent across different runs, while 'md5'
            is a stable hashing function.
        filters: list (or concatenation) of characters to filter out, such as
            punctuation. Default: ``!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\\t\\n``,
            includes basic punctuation, tabs, and newlines.
        lower: boolean. Whether to set the text to lowercase.
        split: str. Separator for word splitting.
        analyzer: function. Custom analyzer to split the text

    Returns:
        A list of integer word indices (unicity non-guaranteed).
        `0` is a reserved index that won't be assigned to any word.
        Two or more words may be assigned to the same index, due to possible
        collisions by the hashing function.
        The [probability](
            https://en.wikipedia.org/wiki/Birthday_problem#Probability_table)
        of a collision is in relation to the dimension of the hashing space and
        the number of distinct objects.
    """
    ...

@keras_export("keras.preprocessing.text.Tokenizer")
class Tokenizer:
    """Text tokenization utility class.

    Deprecated: `tf.keras.preprocessing.text.Tokenizer` does not operate on
    tensors and is not recommended for new code. Prefer
    `tf.keras.layers.TextVectorization` which provides equivalent functionality
    through a layer which accepts `tf.Tensor` input. See the
    [text loading tutorial](https://www.tensorflow.org/tutorials/load_data/text)
    for an overview of the layer and text handling in tensorflow.

    This class allows to vectorize a text corpus, by turning each
    text into either a sequence of integers (each integer being the index
    of a token in a dictionary) or into a vector where the coefficient
    for each token could be binary, based on word count, based on tf-idf...

    By default, all punctuation is removed, turning the texts into
    space-separated sequences of words
    (words maybe include the `'` character). These sequences are then
    split into lists of tokens. They will then be indexed or vectorized.

    `0` is a reserved index that won't be assigned to any word.

    Args:
        num_words: the maximum number of words to keep, based
            on word frequency. Only the most common `num_words-1` words will
            be kept.
        filters: a string where each element is a character that will be
            filtered from the texts. The default is all punctuation, plus
            tabs and line breaks, minus the `'` character.
        lower: boolean. Whether to convert the texts to lowercase.
        split: str. Separator for word splitting.
        char_level: if True, every character will be treated as a token.
        oov_token: if given, it will be added to word_index and used to
            replace out-of-vocabulary words during text_to_sequence calls
        analyzer: function. Custom analyzer to split the text.
            The default analyzer is text_to_word_sequence
    """
    def __init__(self, num_words=..., filters=..., lower=..., split=..., char_level=..., oov_token=..., analyzer=..., **kwargs) -> None:
        ...
    
    def fit_on_texts(self, texts): # -> None:
        """Updates internal vocabulary based on a list of texts.

        In the case where texts contains lists,
        we assume each entry of the lists to be a token.

        Required before using `texts_to_sequences` or `texts_to_matrix`.

        Args:
            texts: can be a list of strings,
                a generator of strings (for memory-efficiency),
                or a list of list of strings.
        """
        ...
    
    def fit_on_sequences(self, sequences): # -> None:
        """Updates internal vocabulary based on a list of sequences.

        Required before using `sequences_to_matrix`
        (if `fit_on_texts` was never called).

        Args:
            sequences: A list of sequence.
                A "sequence" is a list of integer word indices.
        """
        ...
    
    def texts_to_sequences(self, texts): # -> list[list[Unknown]]:
        """Transforms each text in texts to a sequence of integers.

        Only top `num_words-1` most frequent words will be taken into account.
        Only words known by the tokenizer will be taken into account.

        Args:
            texts: A list of texts (strings).

        Returns:
            A list of sequences.
        """
        ...
    
    def texts_to_sequences_generator(self, texts): # -> Generator[list[Unknown], None, None]:
        """Transforms each text in `texts` to a sequence of integers.

        Each item in texts can also be a list,
        in which case we assume each item of that list to be a token.

        Only top `num_words-1` most frequent words will be taken into account.
        Only words known by the tokenizer will be taken into account.

        Args:
            texts: A list of texts (strings).

        Yields:
            Yields individual sequences.
        """
        ...
    
    def sequences_to_texts(self, sequences): # -> list[LiteralString]:
        """Transforms each sequence into a list of text.

        Only top `num_words-1` most frequent words will be taken into account.
        Only words known by the tokenizer will be taken into account.

        Args:
            sequences: A list of sequences (list of integers).

        Returns:
            A list of texts (strings)
        """
        ...
    
    def sequences_to_texts_generator(self, sequences): # -> Generator[LiteralString, None, None]:
        """Transforms each sequence in `sequences` to a list of texts(strings).

        Each sequence has to a list of integers.
        In other words, sequences should be a list of sequences

        Only top `num_words-1` most frequent words will be taken into account.
        Only words known by the tokenizer will be taken into account.

        Args:
            sequences: A list of sequences.

        Yields:
            Yields individual texts.
        """
        ...
    
    def texts_to_matrix(self, texts, mode=...): # -> ndarray[Unknown, Unknown]:
        """Convert a list of texts to a Numpy matrix.

        Args:
            texts: list of strings.
            mode: one of "binary", "count", "tfidf", "freq".

        Returns:
            A Numpy matrix.
        """
        ...
    
    def sequences_to_matrix(self, sequences, mode=...): # -> ndarray[Unknown, Unknown]:
        """Converts a list of sequences into a Numpy matrix.

        Args:
            sequences: list of sequences
                (a sequence is a list of integer word indices).
            mode: one of "binary", "count", "tfidf", "freq"

        Returns:
            A Numpy matrix.

        Raises:
            ValueError: In case of invalid `mode` argument,
                or if the Tokenizer requires to be fit to sample data.
        """
        ...
    
    def get_config(self): # -> dict[str, Unknown]:
        """Returns the tokenizer configuration as Python dictionary.

        The word count dictionaries used by the tokenizer get serialized
        into plain JSON, so that the configuration can be read by other
        projects.

        Returns:
            A Python dictionary with the tokenizer configuration.
        """
        ...
    
    def to_json(self, **kwargs): # -> str:
        """Returns a JSON string containing the tokenizer configuration.

        To load a tokenizer from a JSON string, use
        `keras.preprocessing.text.tokenizer_from_json(json_string)`.

        Args:
            **kwargs: Additional keyword arguments
                to be passed to `json.dumps()`.

        Returns:
            A JSON string containing the tokenizer configuration.
        """
        ...
    


@keras_export("keras.preprocessing.text.tokenizer_from_json")
def tokenizer_from_json(json_string): # -> Tokenizer:
    """Parses a JSON tokenizer configuration and returns a tokenizer instance.

    Deprecated: `tf.keras.preprocessing.text.Tokenizer` does not operate on
    tensors and is not recommended for new code. Prefer
    `tf.keras.layers.TextVectorization` which provides equivalent functionality
    through a layer which accepts `tf.Tensor` input. See the
    [text loading tutorial](https://www.tensorflow.org/tutorials/load_data/text)
    for an overview of the layer and text handling in tensorflow.

    Args:
        json_string: JSON string encoding a tokenizer configuration.

    Returns:
        A Keras Tokenizer instance
    """
    ...

