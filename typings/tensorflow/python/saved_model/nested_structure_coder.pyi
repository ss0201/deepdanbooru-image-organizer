"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.tf_export import tf_export

"""Module that encodes (decodes) nested structures into (from) protos.

The intended use is to serialize everything needed to restore a `Function` that
was saved into a SavedModel. This may include concrete function inputs and
outputs, signatures, function specs, etc.

Example use:
# Encode into proto.
signature_proto = nested_structure_coder.encode_structure(
    function.input_signature)
# Decode into a Python object.
restored_signature = nested_structure_coder.decode_proto(signature_proto)
"""
class NotEncodableError(Exception):
  """Error raised when a coder cannot encode an object."""
  ...


def register_codec(x): # -> None:
  """Registers a codec to use for encoding/decoding.

  Args:
    x: The codec object to register. The object must implement can_encode,
      do_encode, can_decode, and do_decode. See the various _*Codec classes for
      examples.
  """
  ...

@tf_export("__internal__.saved_model.encode_structure", v1=[])
def encode_structure(nested_structure):
  """Encodes nested structures composed of encodable types into a proto.

  Args:
    nested_structure: Structure to encode.

  Returns:
    Encoded proto.

  Raises:
    NotEncodableError: For values for which there are no encoders.
  """
  ...

def can_encode(nested_structure): # -> bool:
  """Determines whether a nested structure can be encoded into a proto.

  Args:
    nested_structure: Structure to encode.

  Returns:
    True if the nested structured can be encoded.
  """
  ...

@tf_export("__internal__.saved_model.decode_proto", v1=[])
def decode_proto(proto):
  """Decodes proto representing a nested structure.

  Args:
    proto: Proto to decode.

  Returns:
    Decoded structure.

  Raises:
    NotEncodableError: For values for which there are no encoders.
  """
  ...

class _ListCodec:
  """Codec for lists."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, list_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> list[Unknown]:
    ...
  


class _TupleCodec:
  """Codec for tuples."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, tuple_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> tuple[Unknown, ...]:
    ...
  


class _DictCodec:
  """Codec for dicts."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, dict_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> dict[Unknown, Unknown]:
    ...
  


class _NamedTupleCodec:
  """Codec for namedtuples.

  Encoding and decoding a namedtuple reconstructs a namedtuple with a different
  actual Python type, but with the same `typename` and `fields`.
  """
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, named_tuple_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> namedtuple:
    ...
  


class _Float64Codec:
  """Codec for floats."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, float64_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn):
    ...
  


class _Int64Codec:
  """Codec for Python integers (limited to 64 bit values)."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, int_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> int:
    ...
  


class _StringCodec:
  """Codec for strings.

  See StructuredValue.string_value in proto/struct.proto for more detailed
  explanation.
  """
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, string_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> text_type:
    ...
  


class _NoneCodec:
  """Codec for None."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, none_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> None:
    ...
  


class _BoolCodec:
  """Codec for booleans."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, bool_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn):
    ...
  


class _TensorShapeCodec:
  """Codec for `TensorShape`."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, tensor_shape_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> TensorShape:
    ...
  


class _TensorTypeCodec:
  """Codec for `TensorType`."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, tensor_dtype_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> DType:
    ...
  


class _TensorSpecCodec:
  """Codec for `TensorSpec`."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, tensor_spec_value, encode_fn): # -> StructuredValue:
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> TypeSpec:
    ...
  


class _BoundedTensorSpecCodec:
  """Codec for `BoundedTensorSpec`."""
  def can_encode(self, pyobj): # -> bool:
    ...
  
  def do_encode(self, bounded_tensor_spec_value, encode_fn): # -> StructuredValue:
    """Returns an encoded proto for the given `tf.BoundedTensorSpec`."""
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> TypeSpec:
    ...
  


class _TypeSpecCodec:
  """Codec for `tf.TypeSpec`."""
  TYPE_SPEC_CLASS_FROM_PROTO = ...
  TYPE_SPEC_CLASS_TO_PROTO = ...
  def can_encode(self, pyobj): # -> bool:
    """Returns true if `pyboj` can be encoded as a TypeSpec."""
    ...
  
  def do_encode(self, type_spec_value, encode_fn): # -> StructuredValue:
    """Returns an encoded proto for the given `tf.TypeSpec`."""
    ...
  
  def can_decode(self, value):
    ...
  
  def do_decode(self, value, decode_fn): # -> TypeSpec:
    """Returns the `tf.TypeSpec` encoded by the proto `value`."""
    ...
  


_codecs = ...
