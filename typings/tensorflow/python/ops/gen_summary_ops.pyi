"""
This type stub file was generated by pyright.
"""

"""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
Original C++ source file: summary_ops.cc
"""
def close_summary_writer(writer, name=...): # -> None:
  r"""TODO: add doc.

  Args:
    writer: A `Tensor` of type `resource`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

CloseSummaryWriter = ...
def close_summary_writer_eager_fallback(writer, name, ctx): # -> None:
  ...

def create_summary_db_writer(writer, db_uri, experiment_name, run_name, user_name, name=...): # -> None:
  r"""TODO: add doc.

  Args:
    writer: A `Tensor` of type `resource`.
    db_uri: A `Tensor` of type `string`.
    experiment_name: A `Tensor` of type `string`.
    run_name: A `Tensor` of type `string`.
    user_name: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

CreateSummaryDbWriter = ...
def create_summary_db_writer_eager_fallback(writer, db_uri, experiment_name, run_name, user_name, name, ctx): # -> None:
  ...

def create_summary_file_writer(writer, logdir, max_queue, flush_millis, filename_suffix, name=...): # -> None:
  r"""TODO: add doc.

  Args:
    writer: A `Tensor` of type `resource`.
    logdir: A `Tensor` of type `string`.
    max_queue: A `Tensor` of type `int32`.
    flush_millis: A `Tensor` of type `int32`.
    filename_suffix: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

CreateSummaryFileWriter = ...
def create_summary_file_writer_eager_fallback(writer, logdir, max_queue, flush_millis, filename_suffix, name, ctx): # -> None:
  ...

def flush_summary_writer(writer, name=...): # -> None:
  r"""TODO: add doc.

  Args:
    writer: A `Tensor` of type `resource`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

FlushSummaryWriter = ...
def flush_summary_writer_eager_fallback(writer, name, ctx): # -> None:
  ...

def import_event(writer, event, name=...): # -> None:
  r"""TODO: add doc.

  Args:
    writer: A `Tensor` of type `resource`.
    event: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

ImportEvent = ...
def import_event_eager_fallback(writer, event, name, ctx): # -> None:
  ...

def summary_writer(shared_name=..., container=..., name=...):
  r"""TODO: add doc.

  Args:
    shared_name: An optional `string`. Defaults to `""`.
    container: An optional `string`. Defaults to `""`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `resource`.
  """
  ...

SummaryWriter = ...
def summary_writer_eager_fallback(shared_name, container, name, ctx):
  ...

def write_audio_summary(writer, step, tag, tensor, sample_rate, max_outputs=..., name=...): # -> None:
  r"""Writes an audio summary.

  Writes encoded audio summary `tensor` at `step` with `tag` using summary `writer`.
  `sample_rate` is the audio sample rate is Hz.

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tag: A `Tensor` of type `string`.
    tensor: A `Tensor` of type `float32`.
    sample_rate: A `Tensor` of type `float32`.
    max_outputs: An optional `int` that is `>= 1`. Defaults to `3`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteAudioSummary = ...
def write_audio_summary_eager_fallback(writer, step, tag, tensor, sample_rate, max_outputs, name, ctx): # -> None:
  ...

def write_graph_summary(writer, step, tensor, name=...): # -> None:
  r"""Writes a graph summary.

  Writes TensorFlow graph `tensor` at `step` using summary `writer`.

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tensor: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteGraphSummary = ...
def write_graph_summary_eager_fallback(writer, step, tensor, name, ctx): # -> None:
  ...

def write_histogram_summary(writer, step, tag, values, name=...): # -> None:
  r"""Writes a histogram summary.

  Writes histogram `values` at `step` with `tag` using summary `writer`.

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tag: A `Tensor` of type `string`.
    values: A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`, `bool`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteHistogramSummary = ...
def write_histogram_summary_eager_fallback(writer, step, tag, values, name, ctx): # -> None:
  ...

def write_image_summary(writer, step, tag, tensor, bad_color, max_images=..., name=...): # -> None:
  r"""Writes an image summary.

  Writes image `tensor` at `step` with `tag` using summary `writer`.
  `tensor` is image with shape [height, width, channels].

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tag: A `Tensor` of type `string`.
    tensor: A `Tensor`. Must be one of the following types: `uint8`, `float64`, `float32`, `half`.
    bad_color: A `Tensor` of type `uint8`.
    max_images: An optional `int` that is `>= 1`. Defaults to `3`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteImageSummary = ...
def write_image_summary_eager_fallback(writer, step, tag, tensor, bad_color, max_images, name, ctx): # -> None:
  ...

def write_raw_proto_summary(writer, step, tensor, name=...): # -> None:
  r"""Writes a serialized proto summary.

  Writes `tensor`, a serialized proto at `step` using summary `writer`.

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tensor: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteRawProtoSummary = ...
def write_raw_proto_summary_eager_fallback(writer, step, tensor, name, ctx): # -> None:
  ...

def write_scalar_summary(writer, step, tag, value, name=...): # -> None:
  r"""Writes a scalar summary.

  Writes scalar `value` at `step` with `tag` using summary `writer`.

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tag: A `Tensor` of type `string`.
    value: A `Tensor`. Must be one of the following types: `float32`, `float64`, `int32`, `uint8`, `int16`, `int8`, `int64`, `bfloat16`, `uint16`, `half`, `uint32`, `uint64`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteScalarSummary = ...
def write_scalar_summary_eager_fallback(writer, step, tag, value, name, ctx): # -> None:
  ...

def write_summary(writer, step, tensor, tag, summary_metadata, name=...): # -> None:
  r"""Writes a tensor summary.

  Writes `tensor` at `step` with `tag` using summary `writer`.

  Args:
    writer: A `Tensor` of type `resource`.
    step: A `Tensor` of type `int64`.
    tensor: A `Tensor`.
    tag: A `Tensor` of type `string`.
    summary_metadata: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

WriteSummary = ...
def write_summary_eager_fallback(writer, step, tensor, tag, summary_metadata, name, ctx): # -> None:
  ...

