"""
This type stub file was generated by pyright.
"""

"""Defines an input type specification for tf.function."""
class FunctionSpec:
  """Specification of how to bind arguments to a function."""
  @classmethod
  def from_function_and_signature(cls, python_function, input_signature, is_pure=..., experimental_follow_type_hints=..., jit_compile=...): # -> FunctionSpec:
    """Creates a FunctionSpec instance given a python function and signature.

    Args:
      python_function: a function to inspect
      input_signature: a signature of the function (None, if variable)
      is_pure: if True all input arguments (including variables and constants)
      will be converted to tensors and no variable changes allowed.
      experimental_follow_type_hints: see `tf.function`
      jit_compile: see `tf.function`

    Returns:
      instance of FunctionSpec
    """
    ...
  
  def __init__(self, fullargspec, is_method, input_signature, is_pure=..., experimental_follow_type_hints=..., name=..., jit_compile=...) -> None:
    """Constructs a FunctionSpec describing a python function.

    Args:
      fullargspec: `tf_inspect.FullArgSpec` object describing the function.
      is_method: True if the function is a method.
      input_signature: a signature of the function (None, if variable)
      is_pure: if True all input arguments (including variables and constants)
        will be converted to tensors and no variable changes allowed.
      experimental_follow_type_hints: see `tf.function`.
      name: Name of the function
      jit_compile: see `tf.function`.
    """
    ...
  
  @property
  def fullargspec(self): # -> Unknown:
    ...
  
  @property
  def is_method(self): # -> Unknown:
    ...
  
  @property
  def args_to_indices(self): # -> dict[Unknown, int]:
    ...
  
  @property
  def kwargs_to_include(self):
    ...
  
  @property
  def input_signature(self): # -> tuple[Unknown, ...] | None:
    ...
  
  @property
  def flat_input_signature(self): # -> tuple[None, ...]:
    ...
  
  @property
  def is_pure(self): # -> bool:
    ...
  
  @property
  def jit_compile(self): # -> None:
    ...
  
  @property
  def arg_names(self):
    ...
  
  @property
  def vararg_name(self):
    ...
  
  @property
  def varkw_name(self):
    ...
  
  def signature_summary(self, default_values=...): # -> str:
    """Returns a string summarizing this function's signature.

    Args:
      default_values: If true, then include default values in the signature.

    Returns:
      A `string`.
    """
    ...
  
  def canonicalize_function_inputs(self, *args, **kwargs): # -> tuple[Unknown | defaultdict[Unknown, Unknown] | Any | list[Unknown] | ObjectProxy, Unknown | defaultdict[Unknown, Unknown] | Any | list[Unknown] | ObjectProxy | dict[str, Tensor | TypeSpec | Unknown | Any] | dict[str, Unknown], list[Tensor | BaseResourceVariable]]:
    """Canonicalizes `args` and `kwargs`.

    Canonicalize the inputs to the Python function using a `FunctionSpec`
    instance. In particular, we parse the varargs and kwargs that the
    original function was called with into a tuple corresponding to the
    Python function's positional (named) arguments and a dictionary
    corresponding to its kwargs.  Missing default arguments are added.

    If this `FunctionSpec` has an input signature, then it is used to convert
    arguments to tensors; otherwise, any inputs containing numpy arrays are
    converted to tensors.

    Additionally, any inputs containing numpy arrays are converted to Tensors.

    Args:
      *args: The varargs this object was called with.
      **kwargs: The keyword args this function was called with.

    Returns:
      A canonicalized ordering of the inputs, as well as full and filtered
      (Tensors and Variables only) versions of their concatenated flattened
      representations, represented by a tuple in the form (args, kwargs,
      flat_args, filtered_flat_args). Here: `args` is a full list of bound
      arguments, and `kwargs` contains only true keyword arguments, as opposed
      to named arguments called in a keyword-like fashion.

    Raises:
      ValueError: If a keyword in `kwargs` cannot be matched with a positional
        argument when an input signature is specified, or when the inputs
        do not conform to the input signature.
    """
    ...
  


