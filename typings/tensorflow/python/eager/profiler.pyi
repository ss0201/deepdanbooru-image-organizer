"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util.deprecation import deprecated

"""TensorFlow 2.0 Profiler for both Eager Mode and Graph Mode.

The profiler has two mode:
- Programmatic Mode: start(), stop() and Profiler class. It will perform
                    when calling start() or create Profiler class and will stop
                    when calling stop() or destroying Profiler class.
- On-demand Mode: start_profiler_server(). It will perform profiling when
                  receive profiling request.

NOTE: Only one active profiler session is allowed. Use of simultaneous
Programmatic Mode and On-demand Mode is undefined and will likely fail.

NOTE: The Keras TensorBoard callback will automatically perform sampled
profiling. Before enabling customized profiling, set the callback flag
"profile_batches=[]" to disable automatic sampled profiling.
customized profiling.
"""
_profiler = ...
_profiler_lock = ...
_run_num = ...
_EVENT_FILE_SUFFIX = ...
class ProfilerAlreadyRunningError(Exception):
  ...


class ProfilerNotRunningError(Exception):
  ...


@deprecated('2020-07-01', 'use `tf.profiler.experimental.start` instead.')
def start(options=...): # -> None:
  """Start profiling.

  Args:
    options: profiler options.

  Raises:
    ProfilerAlreadyRunningError: If another profiling session is running.
  """
  ...

@deprecated('2020-07-01', 'use `tf.profiler.experimental.stop` instead.')
def stop():
  """Stop current profiling session and return its result.

  Returns:
    A binary string of tensorflow.tpu.Trace. User can write the string
    to file for offline analysis by tensorboard.

  Raises:
    ProfilerNotRunningError: If there is no active profiling session.
  """
  ...

@deprecated('2020-07-01', '`tf.python.eager.profiler` has deprecated, use `tf.profiler` instead.')
def maybe_create_event_file(logdir): # -> None:
  """Create an empty event file if not already exists.

  This event file indicates that we have a plugins/profile/ directory in the
  current logdir.

  Args:
    logdir: log directory.
  """
  ...

@deprecated('2020-07-01', '`tf.python.eager.profiler` has deprecated, use `tf.profiler` instead.')
def save(logdir, result): # -> None:
  """Save profile result to TensorBoard logdir.

  Args:
    logdir: log directory read by TensorBoard.
    result: profiling result returned by stop().
  """
  ...

@deprecated('2020-07-01', 'use `tf.profiler.experimental.server.start`.')
def start_profiler_server(port): # -> None:
  """Start a profiler grpc server that listens to given port.

  The profiler server will keep the program running even the training finishes.
  Please shutdown the server with CTRL-C. It can be used in both eager mode and
  graph mode. The service defined in
  tensorflow/core/profiler/profiler_service.proto. Please use
  tensorflow/contrib/tpu/profiler/capture_tpu_profile to capture tracable
  file following https://cloud.google.com/tpu/docs/cloud-tpu-tools#capture_trace

  Args:
    port: port profiler server listens to.
  """
  ...

@deprecated('2020-07-01', 'use `tf.profiler.experimental.Profile` instead.')
class Profiler:
  """Context-manager eager profiler api.

  Example usage:
  ```python
  with Profiler("/path/to/logdir"):
    # do some work
  ```
  """
  def __init__(self, logdir) -> None:
    ...
  
  def __enter__(self): # -> None:
    ...
  
  def __exit__(self, typ, value, tb): # -> None:
    ...
  


