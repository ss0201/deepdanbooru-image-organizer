"""
This type stub file was generated by pyright.
"""

from tensorflow.python.saved_model import registration
from tensorflow.python.trackable import base as trackable

"""A shim layer for working with functions exported/restored from saved models.

This functionality should ultimately be moved into a first-class core API.
"""
@registration.register_tf_serializable()
class TrackableConstant(trackable.Trackable):
  """Trackable class for captured constants."""
  __slots__ = ...
  def __init__(self, capture, function) -> None:
    ...
  


class ExportedConcreteFunction(trackable.Trackable):
  """A callable class that uses captures from the exported SavedModel graph."""
  __slots__ = ...
  def __init__(self, function, tensor_map) -> None:
    ...
  
  def __call__(self, *args, **kwargs):
    ...
  


def get_tensor_from_node(node): # -> Tensor | Any:
  """Resolves a saved model graph node into a tensor to be captured.

  Args:
    node: a tensor, variable, or resource to be resolved into a capturable
      tensor

  Returns:
    A list of tensors.
  Raises:
    ValueError: if the node cannot be converted into a tensor.
  """
  ...

def restore_captures(concrete_function, inputs): # -> None:
  """Restore captures for the concrete function.

  Used at deserialization time.  For functions that are being deserialized,
  saved model restores objects that tensors were captured from, but functions
  only know about their tensors -- object information is destroyed by tracing.
  This additional logic extracts the tensors which the function originally
  captured.

  Args:
    concrete_function: the concrete function for which to restore captures
    inputs: a list tensors or other Python objects (such as variables) which
      contain tensors that were originally captured by the function
  """
  ...

