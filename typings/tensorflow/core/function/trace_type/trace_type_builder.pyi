"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, Hashable
from tensorflow.python.types import trace

"""Utitiles for Cache Key generation based on Function Trace Type."""
class WeakrefDeletionObserver:
  """An observer for the event of deleting a weakref.

  This allows users of FunctionTraceType to be notified when an instance which
  depends on a weakref becomes invalid by the deletion of the weakref. In
  particular, tf.function caches can use this mechanism to clear the cache of
  keys that are no longer valid.

  We use the observer pattern and not just basic callbacks because the keys
  are typically created before they are used by the cache.
  """
  def __init__(self) -> None:
    ...
  
  def add_listener(self, on_delete: Callable[[], None]): # -> None:
    ...
  
  def weakref_deleted(self): # -> None:
    ...
  
  def __call__(self, _): # -> None:
    """Call handler for convenience of use with weakref."""
    ...
  


class InternalTracingContext(trace.TracingContext):
  """Container for variables and flags shared across TraceType generation."""
  def __init__(self) -> None:
    ...
  
  def make_reference_type(self, base_type: trace.TraceType, local_id: Hashable) -> trace.TraceType:
    ...
  
  @property
  def deletion_observer(self): # -> WeakrefDeletionObserver:
    """Returns a functor which invalidates the current key when called."""
    ...
  


def from_object(obj: Any, context: trace.TracingContext = ...) -> trace.TraceType:
  """Returns a TraceType corresponding to the object based on the context.

  Args:
    obj: The object to generate a TraceType for.
    context: The TracingContext to be shared during protocol calls.

  Returns:
    A TraceType object representing the given object.
  """
  ...

