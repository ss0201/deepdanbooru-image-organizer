"""
This type stub file was generated by pyright.
"""

import sys as _sys
from . import special
from tensorflow.python.ops.bincount_ops import bincount_v1 as bincount
from tensorflow.python.ops.check_ops import is_non_decreasing, is_strictly_increasing
from tensorflow.python.ops.confusion_matrix import confusion_matrix_v1 as confusion_matrix
from tensorflow.python.ops.gen_array_ops import invert_permutation
from tensorflow.python.ops.gen_math_ops import acosh, asin, asinh, atan, atan2, atanh, betainc, cos, cosh, digamma, erf, erfc, expm1, floor_mod as floormod, greater, greater_equal, igamma, igammac, is_finite, is_inf, is_nan, less, less_equal, lgamma, log, log1p, logical_and, logical_not, logical_or, maximum, minimum, neg as negative, next_after as nextafter, polygamma, reciprocal, rint, segment_max, segment_mean, segment_min, segment_prod, segment_sum, sin, sinh, square, squared_difference, tan, tanh, unsorted_segment_max, unsorted_segment_min, unsorted_segment_prod, unsorted_segment_sum, xdivy, xlogy, zeta
from tensorflow.python.ops.gen_nn_ops import softsign
from tensorflow.python.ops.math_ops import abs, accumulate_n, acos, add, add_n, angle, argmax, argmin, ceil, conj, count_nonzero, cumprod, cumsum, cumulative_logsumexp, div_no_nan as divide_no_nan, divide, equal, erfcinv, erfinv, exp, floor, floordiv, imag, log_sigmoid, logical_xor, multiply, multiply_no_nan, ndtri, not_equal, polyval, pow, real, reciprocal_no_nan, reduce_all_v1 as reduce_all, reduce_any_v1 as reduce_any, reduce_euclidean_norm, reduce_logsumexp_v1 as reduce_logsumexp, reduce_max_v1 as reduce_max, reduce_mean_v1 as reduce_mean, reduce_min_v1 as reduce_min, reduce_prod_v1 as reduce_prod, reduce_std, reduce_sum_v1 as reduce_sum, reduce_variance, round, rsqrt, scalar_mul, sigmoid, sign, sobol_sample, softplus, sqrt, subtract, truediv, unsorted_segment_mean, unsorted_segment_sqrt_n, xlog1py
from tensorflow.python.ops.nn_impl import l2_normalize, zero_fraction
from tensorflow.python.ops.nn_ops import approx_max_k, approx_min_k, in_top_k, log_softmax, softmax, top_k
from tensorflow.python.ops.special_math_ops import bessel_i0, bessel_i0e, bessel_i1, bessel_i1e, lbeta

"""Math Operations.

Note: Functions taking `Tensor` arguments can also take anything accepted by
`tf.convert_to_tensor`.

Note: Elementwise binary operations in TensorFlow follow [numpy-style
broadcasting](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html).

TensorFlow provides a variety of math functions including:

* Basic arithmetic operators and trigonometric functions.
* Special math functions (like: `tf.math.igamma` and `tf.math.zeta`)
* Complex number functions (like: `tf.math.imag` and `tf.math.angle`)
* Reductions and scans (like: `tf.math.reduce_mean` and `tf.math.cumsum`)
* Segment functions (like: `tf.math.segment_sum`)

See: `tf.linalg` for matrix and tensor functions.

<a id=Segmentation></a>

## About Segmentation

TensorFlow provides several operations that you can use to perform common
math computations on tensor segments.
Here a segmentation is a partitioning of a tensor along
the first dimension, i.e. it  defines a mapping from the first dimension onto
`segment_ids`. The `segment_ids` tensor should be the size of
the first dimension, `d0`, with consecutive IDs in the range `0` to `k`,
where `k<d0`.
In particular, a segmentation of a matrix tensor is a mapping of rows to
segments.

For example:

```python
c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])
tf.math.segment_sum(c, tf.constant([0, 0, 1]))
#  ==>  [[0 0 0 0]
#        [5 6 7 8]]
```

The standard `segment_*` functions assert that the segment indices are sorted.
If you have unsorted indices use the equivalent `unsorted_segment_` function.
These functions take an additional argument `num_segments` so that the output
tensor can be efficiently allocated.

``` python
c = tf.constant([[1,2,3,4], [-1,-2,-3,-4], [5,6,7,8]])
tf.math.unsorted_segment_sum(c, tf.constant([0, 1, 0]), num_segments=2)
# ==> [[ 6,  8, 10, 12],
#       [-1, -2, -3, -4]]
```


"""
