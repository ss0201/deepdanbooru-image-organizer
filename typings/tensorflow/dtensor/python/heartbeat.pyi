"""
This type stub file was generated by pyright.
"""

import threading

"""A heartbeat service periodically pinging all workers.

In normal cases, all workers will exchange the same randomly generated number
until normal program termination. If any worker stops or restarts, other workers
will detect that and crash themselves.

In this module, logging.fatal is used to guarantee a worker crash no matter how
the functions below are called, in a thread or not.
"""
_CONSECUTIVE_FAILURES_LIMIT = ...
_failure_count = ...
_heartbeat_timer = ...
def start(period: int) -> threading.Event:
  """Starts a persistent thread exchanging heartbeats between workers.

  Args:
    period: Heartbeat interval in seconds. Heartbeat timeout is set to the
      larger of `period` - 10 and 2s.

  Returns:
    A threading.Event object. Users can choose to call its set() method to shut
    down the heartbeat service gracefully. This isn't necessary in most cases,
    because the heartbeat service automatically shuts down at successful program
    exit through atexit handlers. But in situations when atexit handlers are not
    invoked, such as when multiprocessing processes exit in tests, users can
    manually request a shutdown.
  """
  ...

