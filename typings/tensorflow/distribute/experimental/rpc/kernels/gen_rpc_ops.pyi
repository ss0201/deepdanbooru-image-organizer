"""
This type stub file was generated by pyright.
"""

from tensorflow.python.util import dispatch as _dispatch
from tensorflow.python.util.tf_export import tf_export

"""Python wrappers around TensorFlow ops.

This file is MACHINE GENERATED! Do not edit.
Original C++ source file: gen_rpc_ops.cc
"""
@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('delete_rpc_future_resource')
def delete_rpc_future_resource(handle, deleter, name=...): # -> _dispatcher_for_delete_rpc_future_resource | object | None:
  r"""TODO: add doc.

  Args:
    handle: A `Tensor` of type `resource`.
    deleter: A `Tensor` of type `variant`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

DeleteRpcFutureResource = ...
_dispatcher_for_delete_rpc_future_resource = delete_rpc_future_resource._tf_type_based_dispatcher.Dispatch
def delete_rpc_future_resource_eager_fallback(handle, deleter, name, ctx): # -> None:
  ...

_RpcCallOutput = ...
@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_call')
def rpc_call(client, method_name, args, timeout_in_ms, name=...): # -> RpcCall | _dispatcher_for_rpc_call | object:
  r"""TODO: add doc.

  Args:
    client: A `Tensor` of type `resource`.
    method_name: A `Tensor` of type `string`.
    args: A list of `Tensor` objects.
    timeout_in_ms: A `Tensor` of type `int64`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (future, deleter).

    future: A `Tensor` of type `resource`.
    deleter: A `Tensor` of type `variant`.
  """
  ...

RpcCall = ...
_dispatcher_for_rpc_call = rpc_call._tf_type_based_dispatcher.Dispatch
def rpc_call_eager_fallback(client, method_name, args, timeout_in_ms, name, ctx): # -> RpcCall:
  ...

_RpcCheckStatusOutput = ...
@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_check_status')
def rpc_check_status(status_or, name=...): # -> RpcCheckStatus | _dispatcher_for_rpc_check_status | object:
  r"""TODO: add doc.

  Args:
    status_or: A `Tensor` of type `resource`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (error_code, error).

    error_code: A `Tensor` of type `int64`.
    error: A `Tensor` of type `string`.
  """
  ...

RpcCheckStatus = ...
_dispatcher_for_rpc_check_status = rpc_check_status._tf_type_based_dispatcher.Dispatch
def rpc_check_status_eager_fallback(status_or, name, ctx): # -> RpcCheckStatus:
  ...

_RpcClientOutput = ...
@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_client')
def rpc_client(server_address, timeout_in_ms, shared_name=..., list_registered_methods=..., name=...):
  r"""TODO: add doc.

  Args:
    server_address: A `Tensor` of type `string`.
    timeout_in_ms: A `Tensor` of type `int64`.
    shared_name: An optional `string`. Defaults to `""`.
    list_registered_methods: An optional `bool`. Defaults to `False`.
    name: A name for the operation (optional).

  Returns:
    A tuple of `Tensor` objects (client, method_specs).

    client: A `Tensor` of type `resource`.
    method_specs: A `Tensor` of type `string`.
  """
  ...

RpcClient = ...
_dispatcher_for_rpc_client = rpc_client._tf_type_based_dispatcher.Dispatch
def rpc_client_eager_fallback(server_address, timeout_in_ms, shared_name, list_registered_methods, name, ctx): # -> RpcClient:
  ...

@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_get_value')
def rpc_get_value(status_or, Tout, name=...): # -> _dispatcher_for_rpc_get_value | object:
  r"""TODO: add doc.

  Args:
    status_or: A `Tensor` of type `resource`.
    Tout: A list of `tf.DTypes`.
    name: A name for the operation (optional).

  Returns:
    A list of `Tensor` objects of type `Tout`.
  """
  ...

RpcGetValue = ...
_dispatcher_for_rpc_get_value = rpc_get_value._tf_type_based_dispatcher.Dispatch
def rpc_get_value_eager_fallback(status_or, Tout, name, ctx):
  ...

@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_server')
def rpc_server(server_address, name=...): # -> _dispatcher_for_rpc_server | object:
  r"""TODO: add doc.

  Args:
    server_address: A `Tensor` of type `string`.
    name: A name for the operation (optional).

  Returns:
    A `Tensor` of type `resource`.
  """
  ...

RpcServer = ...
_dispatcher_for_rpc_server = rpc_server._tf_type_based_dispatcher.Dispatch
def rpc_server_eager_fallback(server_address, name, ctx):
  ...

@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_server_register')
def rpc_server_register(server, method_name, captured_inputs, f, output_specs, input_specs=..., name=...): # -> _dispatcher_for_rpc_server_register | object | None:
  r"""TODO: add doc.

  Args:
    server: A `Tensor` of type `resource`.
    method_name: A `Tensor` of type `string`.
    captured_inputs: A list of `Tensor` objects.
    f: A function decorated with @Defun.
    output_specs: A `string`.
    input_specs: An optional `string`. Defaults to `""`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

RpcServerRegister = ...
_dispatcher_for_rpc_server_register = rpc_server_register._tf_type_based_dispatcher.Dispatch
def rpc_server_register_eager_fallback(server, method_name, captured_inputs, f, output_specs, input_specs, name, ctx): # -> None:
  ...

@_dispatch.add_fallback_dispatch_list
@_dispatch.add_type_based_api_dispatcher
@tf_export('rpc_server_start')
def rpc_server_start(server, name=...): # -> _dispatcher_for_rpc_server_start | object | None:
  r"""TODO: add doc.

  Args:
    server: A `Tensor` of type `resource`.
    name: A name for the operation (optional).

  Returns:
    The created Operation.
  """
  ...

RpcServerStart = ...
_dispatcher_for_rpc_server_start = rpc_server_start._tf_type_based_dispatcher.Dispatch
def rpc_server_start_eager_fallback(server, name, ctx): # -> None:
  ...

